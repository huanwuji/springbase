<html lang="cn">
<head>
    <meta charset="utf-8" content="text/html">
    <title>菜单列表</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <link href="../../js/bootstrap/css/bootstrap.css" rel="stylesheet">
    <link href="../../js/bootstrap/css/bootstrap-responsive.css" rel="stylesheet">
    <link href="../../style/common.css" rel="stylesheet">
    <link rel="stylesheet" href="../../js/zTree/css/zTreeStyle/zTreeStyle.css" type="text/css">

    <script src="../../js/jquery/jquery.js"></script>
    <script src="../../js/bootstrap/js/bootstrap.js"></script>
    <script src="../../js/backbone/underscore.js"></script>
    <script src="../../js/backbone/backbone.js"></script>
    <script src="../../js/jquery/huanwuji.validate.js"></script>
    <script src="../../js/xeno-common/xeno-common-2.1.0.js"></script>
    <script src="../../js/zTree/js/jquery.ztree.all-3.5.js"></script>
    <script src="../../js/common.js"></script>
</head>
<body> '
<div id="menu-container">
    <div id="example" class="k-content">
        <div class="btn-group">
            <a class="btn btn-success create" href="#"><i class="icon-plus"></i>添加</a>
        </div>
        <div id="grid">
            <table class="table table-striped table-hover table-bordered">
                <caption></caption>
                <thead>
                <tr>
                    <th>id</th>
                    <th>编码</th>
                    <th>名称</th>
                    <th>类型</th>
                    <th>链接</th>
                    <th>图标</th>
                    <th>备注</th>
                    <th>是否有效</th>
                    <th>操作</th>
                </tr>
                </thead>
                <tbody>
                </tbody>
                <!--<tfoot>-->
                <!--<tr>-->
                <!--<td></td>-->
                <!--</tr>-->
                <!--</tfoot>-->
            </table>
            <div class="pagination">
                <ul>
                    <li class="disabled"><a href="#">Prev</a></li>
                    <li class="active"><a href="#">1</a></li>
                    <li><a href="#">2</a></li>
                    <li><a href="#">3</a></li>
                    <li><a href="#">4</a></li>
                    <li><a href="#">...</a></li>
                    <li><a href="#">20</a></li>
                    <li><a href="#">Next</a></li>
                </ul>
            </div>
        </div>

        <script type="text/template" id="menus-template">
            <td><%=id%></td>
            <td><%=code%></td>
            <td><%=name%></td>
            <td><%=type%></td>
            <td><%=url%></td>
            <td><%=icon%></td>
            <td><%=descr%></td>
            <td><%=isValid==true ? '是 ':'否'%></td>
            <td>
                <div class="btn-group">
                    <a class="btn btn-success update" href="#"><i class="icon-pencil"></i></a>
                    <a class="btn btn-danger delete" href="#"><i class="icon-remove"></i></a>
                </div>
            </td>
        </script>
        <script>
            $(document).ready(function () {
                var menuContainer = $("#menu-container");
                var Menu = Backbone.Model.extend({
                    validateUtils: null,
                    defaults: {
                        id: "",
                        code: "",
                        name: "",
                        isLeaf: "",
                        treeId: "",
                        url: "",
                        icon: "",
                        type: "",
                        descr: "",
                        isValid: true,
                        parent: ""
                    }, validate: function (attributes, options) {
                        _.each(attributes, function (value, key) {
                            if (this.validateUtils.validate(key, value)) {
                                console.log(key, value);
                                return false;
                            }
                        }, this);
                    }
                });
                var MenuList = Backbone.Collection.extend({
                    model: Menu,
                    url: "/menu"
                });
                var menuList = new MenuList();

                var MenuFormView = Backbone.View.extend({
                    id: "menuFormView",
                    events: {
                        "click button.save": "save"
                    }, template: new huanwuji.LoadTemp("/views/menu/form.htm"),
                    initialize: function () {
                    }, render: function () {
                        this.$el.html(this.template.tpl(this.model.toJSON()));
                        menuContainer.append(this.$el);
                        this.initValidate(this.$el);
                        var that = this;
                        this.$el.children().eq(0).modal().on("hidden", function () {
                            that.remove();
                        });
                        return this;
                    }, initValidate: function (form) {
                        var validateUtils = new huanwuji.validateUtils(form);
                        this.model.validateUtils = validateUtils;
                    }, save: function () {
                        var jsonArray = this.$el.find("form").serializeArray();
                        var model = this.model;
                        _.each(jsonArray, function (element) {
                            model.set(element.name, element.value, {validate: true});
                        });
                    }
                });
                var MenuView = Backbone.View.extend({
                    events: {
//                        "click .toggle"   : "toggleDone",
//                        "dblclick .view"  : "edit",
                        "click a.update": "updateView",
                        "click a.delete": "destroy"
//                        "keypress .edit"  : "updateOnEnter",
//                        "blur .edit"      : "close"
                    }, tagName: "tr",
                    template: _.template($('#menus-template').html()),
                    initialize: function () {
//                        tdis.listenTo(this.model, 'change', this.render);
                        this.listenTo(this.model, 'destroy', this.remove);
                    }, render: function () {
                        var bean = this.model.toJSON();
                        for (var name in bean) {
                            if (!bean[name]) {
                                bean[name] = "&nbsp;";
                            }
                        }
                        this.$el.html(this.template(bean));
                        return this;
                    }, updateView: function (event) {
                        this.model.fetch();
                        var menuFormView = new MenuFormView({model: this.model});
                        menuFormView.render();
                    }, destroy: function () {
                        this.model.destroy();
                    }
                });
                var MenuListView = Backbone.View.extend({
                    el: menuContainer,
                    events: {
                        "click a.create": "createView"
                    }, initialize: function () {
//                        this.listenTo(menuList, 'add', this.addOne);
                        this.listenTo(menuList, 'reset', this.addAll);
//                        this.listenTo(menuList, 'all', this.render);
//                        menuList.fetch({update:true});
                        menuList.fetch();
                    }, createView: function (event, menu) {
                        var menuFormView = new MenuFormView({model: new Menu()});
                        menuFormView.render();
                    }, addOne: function (menu) {
                        var menuView = new MenuView({model: menu});
                        this.$("#grid tbody").append(menuView.render().el);
                    }, addAll: function () {
                        menuList.each(this.addOne, this);
                    }
                });
                var menuListView = new MenuListView();
            });
        </script>
    </div>
</div>
</body>
</html>