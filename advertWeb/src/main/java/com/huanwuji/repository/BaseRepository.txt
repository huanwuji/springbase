package com.huanwuji.repository;

import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.Predicate;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Persistable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.support.JpaEntityInformation;
import org.springframework.data.jpa.repository.support.JpaPersistableEntityInformation;
import org.springframework.data.jpa.repository.support.LockMetadataProvider;
import org.springframework.data.jpa.repository.support.QueryDslJpaRepository;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaQuery;
import java.util.List;
import java.util.Map;

/**
 * Created with IntelliJ IDEA.
 * <p/>
 * User: juyee
 * Date: 12-8-2
 * Time: 下午4:57
 * To change this template use File | Settings | File Templates.
 */
public class BaseRepository<T extends Persistable<ID>, ID extends java.io.Serializable> {

    private QueryDslJpaRepository<T, ID> queryDslJpaRepository;

    private EntityManager entityManager;

    private Class<T> clazz;

    public BaseRepository(Class<T> clazz, EntityManager entityManager) {
        JpaEntityInformation<T, ID> entityInformation
                = new JpaPersistableEntityInformation<T, ID>(clazz, entityManager.getMetamodel());
        this.entityManager = entityManager;
        this.queryDslJpaRepository = new QueryDslJpaRepository<T, ID>(entityInformation, entityManager);
        this.clazz = clazz;
    }

    public QueryDslJpaRepository<T, ID> getQueryDslJpaRepository() {
        return queryDslJpaRepository;
    }

    public void setQueryDslJpaRepository(QueryDslJpaRepository<T, ID> queryDslJpaRepository) {
        this.queryDslJpaRepository = queryDslJpaRepository;
    }

    public EntityManager getEntityManager() {
        return entityManager;
    }

    public void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    public Long count() {
        return queryDslJpaRepository.count();
    }

    public Long count(Predicate predicate) {
        return queryDslJpaRepository.count(predicate);
    }

    public Long count(Specification<T> specification) {
        return queryDslJpaRepository.count(specification);
    }

    public void delete(ID id) {
        queryDslJpaRepository.delete(id);
    }

    public void delete(Iterable<T> entities) {
        queryDslJpaRepository.delete(entities);
    }

    public void delete(T entity) {
        queryDslJpaRepository.delete(entity);
    }

    public void deleteAll() {
        queryDslJpaRepository.deleteAll();
    }

    public void deleteAllInBatch() {
        queryDslJpaRepository.deleteAllInBatch();
    }

    public void deleteInBatch(Iterable<T> entities) {
        queryDslJpaRepository.deleteInBatch(entities);
    }

    public boolean exists(ID id) {
        return queryDslJpaRepository.exists(id);
    }

    public List<T> findAll() {
        return queryDslJpaRepository.findAll();
    }

    public List<T> findAll(Iterable<ID> ids) {
        return queryDslJpaRepository.findAll(ids);
    }

    public Page<T> findAll(Pageable pageable) {
        return queryDslJpaRepository.findAll(pageable);
    }

    public List<T> findAll(Predicate predicate) {
        return queryDslJpaRepository.findAll(predicate);
    }

    public List<T> findAll(Predicate predicate, OrderSpecifier<?> orderSpecifier) {
        return queryDslJpaRepository.findAll(predicate, orderSpecifier);
    }

    public Page<T> findAll(Predicate predicate, Pageable pageable) {
        return queryDslJpaRepository.findAll(predicate, pageable);
    }

    public List<T> findAll(Sort sort) {
        return queryDslJpaRepository.findAll(sort);
    }

    public List<T> findAll(Specification<T> specification) {
        return queryDslJpaRepository.findAll(specification);
    }

    public Page<T> findAll(Specification<T> specification, Pageable pageable) {
        return queryDslJpaRepository.findAll(specification, pageable);
    }

    public List<T> findAll(Specification<T> specification, Sort sort) {
        return queryDslJpaRepository.findAll(specification, sort);
    }

    public T findOne(ID id) {
        return queryDslJpaRepository.findOne(id);
    }

    public T findOne(Predicate predicate) {
        return queryDslJpaRepository.findOne(predicate);
    }

    public T findOne(Specification<T> specification) {
        return queryDslJpaRepository.findOne(specification);
    }

    public void flush() {
        queryDslJpaRepository.flush();
    }

    public List<T> save(Iterable<T> entities) {
        return queryDslJpaRepository.save(entities);
    }

    public T save(T entity) {
        return queryDslJpaRepository.save(entity);
    }

    public T saveAndFlush(T entity) {
        return queryDslJpaRepository.saveAndFlush(entity);
    }

    public void setLockMetadataProvider(LockMetadataProvider lockMetadataProvider) {
        queryDslJpaRepository.setLockMetadataProvider(lockMetadataProvider);
    }

    public void emClear() {
        entityManager.clear();
    }

    public void emClose() {
        entityManager.close();
    }

    public boolean emContains(T entity) {
        return entityManager.contains(entity);
    }

    public Query emCreateNamedQuery(String s) {
        return entityManager.createNamedQuery(s);
    }

    public Query emCreateNamedQuery(String s, Class<T> clazz) {
        return entityManager.createNamedQuery(s, clazz);
    }

    public Query emCreateNativeQuery(String s) {
        return entityManager.createNativeQuery(s);
    }

    public Query emCreateNativeQuery(String s, Class<T> clazz) {
        return entityManager.createNativeQuery(s, clazz);
    }

    public Query emCreateNativeQuery(String s, String s1) {
        return entityManager.createNativeQuery(s, s1);
    }

    public Query emCreateQuery(String s) {
        return entityManager.createQuery(s);
    }

    public Query emCreateQuery(String s, Class<T> aClass) {
        return entityManager.createQuery(s, aClass);
    }

    public Query emCreateQuery(CriteriaQuery<T> criteriaQuery) {
        return entityManager.createQuery(criteriaQuery);
    }

    public void emDetach(T entity) {
        entityManager.detach(entity);
    }

    public T emFind(T entity) {
        return entityManager.find(this.clazz, entity);
    }

    public boolean emIsOpen() {
        return entityManager.isOpen();
    }

    public Map<String, Object> emGetProperties() {
        return entityManager.getProperties();
    }

    public T emMerge(T entity) {
        return entityManager.merge(entity);
    }

    public void emRefresh(T entity) {
        entityManager.refresh(entity);
    }
}
